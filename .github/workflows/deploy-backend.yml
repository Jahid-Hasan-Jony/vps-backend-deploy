name: Deploy Backend (Node/Express ‚Üí VPS)

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Show repo layout
        run: |
          pwd
          ls -la
          (command -v tree && tree -a -L 2 || true)

      # ensure target dir exists (prevents scp failure)
      - name: SSH ‚Üí prepare deploy dir
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            set -e
            mkdir -p "${{ secrets.SERVER_PATH }}"
            ls -la "${{ secrets.SERVER_PATH }}" || true

      # scp v0.1.7 ‚áí single-line, comma-separated source
      - name: Copy backend files to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "package.json,package-lock.json,server.js"
          target: ${{ secrets.SERVER_PATH }}
          overwrite: true
          debug: true

      - name: SSH ‚Üí install deps & (re)start PM2 (env-safe + diagnostics)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          # request_pty: true   # nvm ‡¶¶‡¶ø‡ßü‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶≤‡ßá PATH ‡¶á‡¶∏‡ßç‡¶Ø‡ßÅ ‡¶π‡¶≤‡ßá ‡¶Ü‡¶®‡¶ï‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
          script: |
            set -Eeuo pipefail

            DEPLOY_DIR="${{ secrets.SERVER_PATH }}"
            APP_NAME="${{ secrets.PM2_APP }}"

            echo "‚û§ Ensure Node.js/npm present"
            if ! command -v node >/dev/null 2>&1 || ! command -v npm >/dev/null 2>&1; then
              curl -fsSL https://deb.nodesource.com/setup_22.x | bash -
              apt-get install -y nodejs
            fi

            # nvm ‡¶•‡¶æ‡¶ï‡¶≤‡ßá ‡¶≤‡ßã‡¶° (‡¶®‡¶æ ‡¶•‡¶æ‡¶ï‡¶≤‡ßá harmless)
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" || true
            [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion" || true
            command -v npm >/dev/null 2>&1 && export PATH="$(npm bin -g):$PATH"

            echo "‚û§ Go to deploy dir"
            cd "$DEPLOY_DIR"
            pwd
            ls -la

            echo "‚û§ Write .env from secret"
            cat > .env << 'EOF'
            ${{ secrets.BACKEND_ENV }}
            EOF

            echo "‚û§ Export env from .env so PM2 inherits"
            set -a
            [ -f .env ] && . ./.env
            set +a

            if [ -z "${PORT:-}" ]; then
              echo "‚ùå PORT not set in .env (BACKEND_ENV secret)"; exit 1
            fi

            echo "‚û§ Port sanity"
            echo "PORT=$PORT"
            echo "‚û§ Current PM2 processes"
            pm2 ls || true

            echo "‚û§ Check if PORT $PORT already in use"
            (ss -ltnp | grep ":$PORT") && echo "‚ö†Ô∏è Port $PORT busy (expected if an old instance is running)" || echo "OK: no listener on $PORT"

            echo "‚û§ Normalize ownership (optional)"
            chown -R "$USER:$USER" "$DEPLOY_DIR" || true

            echo "‚û§ Install production dependencies"
            if [ -f package-lock.json ]; then
              npm ci --omit=dev
            else
              npm install --production
            fi

            ENTRY_FILE="$DEPLOY_DIR/server.js"
            if [ ! -f "$ENTRY_FILE" ]; then
              echo "‚ùå Entry not found: $ENTRY_FILE"
              ls -la
              exit 1
            fi

            echo "‚û§ Start/Restart PM2: $APP_NAME"
            set +e
            if pm2 describe "$APP_NAME" >/dev/null 2>&1; then
              # App exists ‚Üí restart with new env
              pm2 restart "$APP_NAME" --update-env
              PM2_RC=$?
            else
              # App doesn't exist ‚Üí try start
              pm2 start "$ENTRY_FILE" --name "$APP_NAME" --cwd "$DEPLOY_DIR"
              PM2_RC=$?
            fi
            set -e

            echo "‚û§ PM2 return code: $PM2_RC"
            pm2 ls || true

            echo "‚û§ Last logs (120 lines)"
            pm2 logs "$APP_NAME" --lines 120 --nostream || true

            if [ "$PM2_RC" -ne 0 ]; then
              echo "‚ùå PM2 start/restart failed ($PM2_RC)"
              echo "üëâ Hints:"
              echo "   ‚Ä¢ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶π‡¶ì secrets.PM2_APP == ‡¶π‡¶æ‡¶§‡ßá ‡¶ö‡¶æ‡¶≤‡¶æ‡¶®‡ßã PM2 ‡¶™‡ßç‡¶∞‡ßã‡¶∏‡ßá‡¶∏‡ßá‡¶∞ ‡¶®‡¶æ‡¶Æ (‡¶â‡¶¶‡¶æ: api-backend)"
              echo "   ‚Ä¢ If port-in-use, either set PM2_APP to the running one OR stop it: pm2 delete <old-name>"
              exit "$PM2_RC"
            fi

            pm2 save
            echo "‚û§ Deploy complete!"
